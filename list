 #include <stdio.h>
 #include <stdlib.h>
 typedef struct node 
 {
 	int entry;
 	struct node*next;
 }node;
 /*the list and its size*/
 typedef struct list
{
	int size;
	node *head;
}list;

typedef int position;
 node *MakeListNode(int element);  //the fucntion that creates the node
 int Search(int p,list*list,node**current); //the search function
 
 int main()
 {
 	list*List;//the structure that has the head and list size
 	List=(list*)malloc(sizeof(list));
 	int n; //the numberof elements
 	int count=0; //number of list nodes
 	int element; //the elements in the list
 	node *newnode; //the new node
 	node *current; //the pointer that moves through the list
 	int choice=1;
 	printf("enter the number of nodes in the list\n");
 	scanf("%d",&List->size);
 	while(count<List->size&&choice==1)
 	{
	 	printf("enter the element in the node\n");
	 	scanf("%d",&element);
	 	CreateList(count,element,List);
	 	printf("this is the head is %d\n",List->head->entry);
	 	count++;
	 	printf("press enter 1 to repeat the entry and 0 to stop\n");
	 	scanf("%d",&choice);
 }
for (count =0;count<List->size;count++)
{
	search(count,List,&current);
	printf("%d\n",current->entry);
}
}
 /*the function that builds the list*/
int CreateList(position count,int element,list*list)
{
	node * newnode; //the new node entering the list
	node * current;//the node moving through the list
if (count<0||count>=list->size)
	{
		printf("there is an attempt to enter what is no in the list");
	}
	else
	{
		if (count==0)
		{
			newnode=MakeListNode(element);
			newnode->next=list->head;
			list->head=newnode;
		}
		else
		{
			newnode=MakeListNode(element);
			newnode->next=current->next;
			current->next=newnode;
		}
	}
}
 
 /*the fucntion that creates the node*/	
node *MakeListNode(int element)
{
	node *p;
	p=(node*)malloc(sizeof(node));// get space from the system
	if (p)
	{
		p->entry=element;
		p->next=NULL;
	}else
	{
		printf("not enough space for additional information");
	}
	return p;
}

/*the function that displays the list*/
int display(list*list,node * current)//not complete
{
	int count;// for variation of position 
}

/*the search function*/
int search(int p,list*list,node**current) // function is meant to search for a location within the list
{
	int count; //used in the loop
	node *q;//used to move through ou the list 
	if (p<0||p>=list->size)
	{
		printf("there is an attempt to enter what is no in the list");
	}
	else
	{
		q=list->head;
		for(count=0;count<p;count++)
		{
			q =q->next;
		}
		*current=q;
	}
}
